<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smile</title>
  
  
  <link href="https://xuan258.github.io/atom.xml" rel="self"/>
  
  <link href="https://xuan258.github.io/"/>
  <updated>2023-07-05T03:47:24.489Z</updated>
  <id>https://xuan258.github.io/</id>
  
  <author>
    <name>Smile</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart简单语言</title>
    <link href="https://xuan258.github.io/Dart%E8%AF%AD%E8%A8%80%E5%85%88%E7%9F%A5%E9%81%93/"/>
    <id>https://xuan258.github.io/Dart%E8%AF%AD%E8%A8%80%E5%85%88%E7%9F%A5%E9%81%93/</id>
    <published>2023-07-04T07:49:55.417Z</published>
    <updated>2023-07-05T03:47:24.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart介绍"><a href="#Dart介绍" class="headerlink" title="Dart介绍"></a>Dart介绍</h1><p>Flutter不是语言，是UI框架，用Dart语言书写简单。以下会大致列出在日常开发当中涉及到的语法，当然带着例子更容易理解一些啦。<br>更多Dart信息推荐查看官网<a href="https://dart.dev/language">dart.dev</a></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>每一个app都有一个main函数<br>void main() { print(‘Hello, World’); }</p><h2 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h2><p>即便是在类型安全（type-safe）的Dart语言当中，大多数的变量都不需要显示类型声明，会根据声明的变量值去推断该变量的类型<br>var name &#x3D; ‘Voyager I’;<br>var year &#x3D; 2023;<br>var antennaDiameter &#x3D; 3.7;<br>var flybyObjects &#x3D; [‘Jupiter’, ‘Saturn’, ‘Uranus’, ‘Neptune’];<br>var image &#x3D; { ‘tags’: [‘saturn’], ‘url’: ‘&#x2F;&#x2F;path&#x2F;to.saturn.jpg’ };</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 循环语句：</span><br><span class="line">if (year >= 2001) {</span><br><span class="line">   print('21st century');</span><br><span class="line">} else if (year >= 1901) {</span><br><span class="line">   print('20st century');</span><br><span class="line">}</span><br><span class="line">for (var object in flyObjects) {</span><br><span class="line">   print(object);</span><br><span class="line">}</span><br><span class="line">for (int month = 1; month <= 12; month++) {</span><br><span class="line">   print(month);</span><br><span class="line">}</span><br><span class="line">while (year < 2016) {</span><br><span class="line">   year += 1;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的声明，函数的参数要携带参数类型，如果有返回值，也要声明返回值类型，如果为空，则为void</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 函数的声明格式：</span><br><span class="line">int fibonacci(int n) {</span><br><span class="line">   if (n == 0 || n == 1)</span><br><span class="line">   return n;</span><br><span class="line">   return fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class="line">}</span><br><span class="line">var result = fibonacci(20);</span><br></pre></td></tr></tbody></table></figure>Dart也有箭头函数，箭头函数适应于函数体只有一行语句<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Dart语言的注释通常以’&#x2F;&#x2F;开头’，也支持&#x2F;* xxx <em>&#x2F;，以下是官方的说明<br>&#x2F;&#x2F; This is a normal, one-line comment.<br>&#x2F;&#x2F;&#x2F; This is a documentation comment, used to document libraries.<br>&#x2F;&#x2F;&#x2F; classes, and their members. Tools like IDEs and dartdoc treat.<br>&#x2F;&#x2F;&#x2F; doc comments specially.<br>&#x2F;</em> Comments like these are also supported. *&#x2F;</p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>同大多数语言一样，Dart语言引入依赖的方式也是Import<br>例如：import ‘dart.math’; &#x2F;&#x2F; 引入核心依赖，来源dart的SDK<br>     import ‘package:test&#x2F;test.dart’; &#x2F;&#x2F; 引入pub市场的依赖包<br>     import ‘path&#x2F;to&#x2F;my_other_file.dart’; &#x2F;&#x2F; 引入本项目内部的依赖</p><h2 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h2><p>先引入一个class的样板，然后我们剖析一下</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// class：</span><br><span class="line">class Spacecraft {</span><br><span class="line">   String name;</span><br><span class="line">   DateTime launchDate;</span><br><span class="line">   // Constructor, with suntactic sugar for assignment to membeers.</span><br><span class="line">   Spacecraft(this.name, this.launchDate) {</span><br><span class="line">      // Initialization code goes here.</span><br><span class="line">   }</span><br><span class="line">   // Named constructor that forwards to the default one.</span><br><span class="line">   Spacecraft.unlaunched(String name) : this(name, null);</span><br><span class="line">   int get launchYear => launchDate?.year; // read-only non-final property</span><br><span class="line">   // Method.</span><br><span class="line">   void describe() {</span><br><span class="line">      print('Spacecraft: $name');</span><br><span class="line">      if (launchDate != null) {</span><br><span class="line">         int years=DateTime.now().difference(launchDate).inDays ~/365;</span><br><span class="line">         print('Launched: $launchYear ($years years ago)');</span><br><span class="line">      } else {</span><br><span class="line">         print('Unlaunched');</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>然后这里声明的Class我们可以这样使用：<p>var voyager &#x3D; Spacecraft(‘Voyager I’, DateTime(2023, 07, 05));<br>voyager.describe();<br>var voyager2 &#x3D; Spacecraft.unlaunched(‘Voyager III’);<br>voyager2.describe();<br>说明：函数的构造器是一个为成员赋值的语法糖，省去我们使用this.name &#x3D; value;<br>该Class里面有两个构造函数，其中Spacecraft.unlaunched(String name):this(name, null);这个构造函数的定义基于他之前的构造函数（冒号（:）的作用在于此，等同于Spacecraft(String name)）<br>name和launchDate这两个属性我们可以直接读取和修改，而get包装的属性只能读取，需要通过set包装的方法才可以修改</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Dart是单继承的，不像某些语言可以多继承<br>class Orbiter extends Spacecraft {<br>    num altitude;<br>    Orbiter(String name, DateTime launchDate, this.altitude) : super(name, launchDate);<br>}</p><h2 id="混合（Mixins），继承-实现"><a href="#混合（Mixins），继承-实现" class="headerlink" title="混合（Mixins），继承+实现"></a>混合（Mixins），继承+实现</h2><p> class MockSpaceship implements Spacecraft { &#x2F;&#x2F; …}</p><h2 id="Interfaces-and-abstract-classes"><a href="#Interfaces-and-abstract-classes" class="headerlink" title="Interfaces and abstract classes"></a>Interfaces and abstract classes</h2><p> Dart没有interface的关键词，所有的类都会隐式的定义一个接口，因此你可以书写下面的语句来实现任何类<br> class MockSpaceship implements Spacecraft { &#x2F;&#x2F; …}<br> 抽象类一般用作基类</p><h2 id="异步Async"><a href="#异步Async" class="headerlink" title="异步Async"></a>异步Async</h2><p> 我们在书写代码的时候为了保证可读性和避免地狱回调，因此使用 async&#x2F;await。<br> const oneSecond &#x3D; Duration(seconds: 1); &#x2F;&#x2F; … Future&lt;<void>void&gt; printWithDelay(String message) async { await Future.delayed(oneSecond); print(message);}<br> 这段代码等价于<br> Future&lt;<void>void&gt; printWithDelay(String message) { return Future.delayed(oneSecond).then((_) { print(message);});}<br> 以下这段代码就是</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// async/await可读性：</span><br><span class="line">Future<<void>void> createDescriptions(Iterable<<String>String>objects) async {</span><br><span class="line">   for (var object in objects) {</span><br><span class="line">      try {</span><br><span class="line">         var file = File('$object.txt');</span><br><span class="line">         if (await file.exists()) {</span><br><span class="line">            var modified = await file.lastModified();</span><br><span class="line">            print('File for $object already exists. It was modified on $modified.');</span><br><span class="line">            continue;</span><br><span class="line">         }</span><br><span class="line">         await file.create();</span><br><span class="line">         await file.writeAsString('Start describing $object in this file.');</span><br><span class="line">      } on IOException catch (e) {</span><br><span class="line">         print('Cannot create description for $object: $e');</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="异常处理-Exceptions"><a href="#异常处理-Exceptions" class="headerlink" title="异常处理 Exceptions"></a>异常处理 Exceptions</h2><p>同其他语言，Dart语言的异常抛出也为throw，如果先捕获，则try …on或者catch或者on+catch</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 异常处理：</span><br><span class="line">try {</span><br><span class="line">   for (var object in flybyObjects) {</span><br><span class="line">      var description = await File('$object.txt').readAsString();</span><br><span class="line">      print(description);</span><br><span class="line">   }</span><br><span class="line">} on IOException catch (e) {</span><br><span class="line">   print('Could not desctibe object: $e');</span><br><span class="line">} finally {</span><br><span class="line">   flybyObjects.clear();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dart介绍&quot;&gt;&lt;a href=&quot;#Dart介绍&quot; class=&quot;headerlink&quot; title=&quot;Dart介绍&quot;&gt;&lt;/a&gt;Dart介绍&lt;/h1&gt;&lt;p&gt;Flutter不是语言，是UI框架，用Dart语言书写简单。以下会大致列出在日常开发当中涉及到的语法，当然带</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【Hexo】Mac OS上使用Hexo + Github搭建博客教程</title>
    <link href="https://xuan258.github.io/[Hexo]%20Mac%20Os%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo%20+%20Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://xuan258.github.io/[Hexo]%20Mac%20Os%E4%B8%8A%E4%BD%BF%E7%94%A8Hexo%20+%20Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</id>
    <published>2022-06-29T08:28:18.431Z</published>
    <updated>2023-07-05T07:27:40.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo介绍"><a href="#hexo介绍" class="headerlink" title="hexo介绍"></a>hexo介绍</h1><p>Hexo是一个快速、简洁且高效的博客框架，具体可以见<a href="https://hexo.io/zh-cn/">Hexo官网</a>，它在github上的star数现在已经到34.7k，Hexo主要有以下特点：</p><ol><li>超快速度：Node.js所带来的超快生成速度，可以让上百个页面在几秒内完成渲染。</li><li>支持Markdown：Hexo支持Github Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li><li>一键部署：只需一条指令即可部署到 Github Pages，Hexoku 或其他平台。</li><li>插件或可扩展性：强大的 API 带来无限的可能，与数种模版引擎（EJS，Pug，Nunjucks）和工具（Babel，PostCSS，Less&#x2F;Sass）轻易集成。</li></ol><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装<code>Node.js</code></h3><p>下载地址：<a href="https://nodejs.org/en/">Node.js</a></p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_01.png" alt="Node.js"></p><h3 id="安装淘宝镜像"><a href="#安装淘宝镜像" class="headerlink" title="安装淘宝镜像"></a>安装淘宝镜像</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 使用命令安装淘宝镜像：</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 使用命令去安装Hexo</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p>安装成功后，使用<code>hexo -v</code>命令去查看Hexo的版本：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_02.png" alt="安装成功显示图片"></p><h1 id="初始化Hexo-Blog"><a href="#初始化Hexo-Blog" class="headerlink" title="初始化Hexo Blog"></a>初始化Hexo Blog</h1><h3 id="新建一个文件夹"><a href="#新建一个文件夹" class="headerlink" title="新建一个文件夹"></a>新建一个文件夹</h3><p>我这里创建一个名为Blogs的文件夹，并进入该文件夹内</p><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 初始化hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></tbody></table></figure><p>初始化成功如下：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_03.png" alt="初始化成功显示图片"></p><p>这时候Blogs下的目录结构如下：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_04.png" alt="这时候Blogs下的目录结构"></p><h3 id="本地启动Hexo"><a href="#本地启动Hexo" class="headerlink" title="本地启动Hexo"></a>本地启动Hexo</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 启动Hexo</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_05.png" alt="本地启动Hexo"></p><p>浏览器打开博客网站</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_06.png" alt="本地启动Hexo"></p><h1 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h1><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 创建一篇博客</span><br><span class="line">hexo n "我的第一篇博客文章"</span><br></pre></td></tr></tbody></table></figure><p>文章在Blogs目录下的结构如下：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_07.png" alt="文章在Blogs目录下的结构"></p><h3 id="清理项目缓存"><a href="#清理项目缓存" class="headerlink" title="清理项目缓存"></a>清理项目缓存</h3><p>新增博客文章或修改博客文章内容，需要执行此命令</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 清理之前生成的网站</span><br><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure><h3 id="重新生成博客"><a href="#重新生成博客" class="headerlink" title="重新生成博客"></a>重新生成博客</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 重新生成博客</span><br><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure><h3 id="再次启动项目"><a href="#再次启动项目" class="headerlink" title="再次启动项目"></a>再次启动项目</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 再次启动博客网站</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>浏览器页面展示如下：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_08.png" alt="浏览器页面显示图片"></p><h1 id="修改网站主题"><a href="#修改网站主题" class="headerlink" title="修改网站主题"></a>修改网站主题</h1><p>Hexo框架默认的是landscape主题，Hexo上有三百多种主题，大家可以上<a href="https://hexo.io/themes/">Hexo 官网</a>选择自己喜欢的主题，我这里以butterfly为例：</p><h3 id="下载butterfly主题"><a href="#下载butterfly主题" class="headerlink" title="下载butterfly主题"></a>下载butterfly主题</h3><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 下载butterfly</span><br><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></tbody></table></figure><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_09.png" alt="下载butterfly主题显示图片"></p><p>我们下载的主题都存放在Blogs&#x2F;themes文件夹下：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_10.png" alt="主题目录图片"></p><h3 id="修改项目配置文件"><a href="#修改项目配置文件" class="headerlink" title="修改项目配置文件"></a>修改项目配置文件</h3><p>主题下载下来之后，我们需要在项目配置文件_config.yml里面修改我们的主题：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_11.png" alt="修改的图片"></p><p>把默认的<code>landscape</code>修改为我们下载好的主题<code>butterfly</code></p><h3 id="重新生成项目"><a href="#重新生成项目" class="headerlink" title="重新生成项目"></a>重新生成项目</h3><p>这时候再执行我们Hexo三连：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 清理项目缓存</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">// 重新生成项目</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">// 本地启动项目</span><br><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>Tips：重新生成项目和本地启动项目可以合并：<code>hexo g & hexo s</code></p><p>再次打开项目，效果图如下：<br><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_12.png" alt="报错信息图片"></p><p>哈哈啊哈～ 惊喜不～ 意外不～ 这是个啥玩意？？？</p><p>莫慌～ 发现问题 - 找到问题 - 分析问题 - 解决问题：</p><p>原因其实也很简单，我们没有安装pug和stylus的渲染器，执行如下命令：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">// 在Blogs目录下 安装pug 和 stylus渲染器</span><br><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></tbody></table></figure><p>安装完成后，重新生成项目：</p><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_13.png" alt="重新生成项目图片"></p><div class="note simple"><p>到这里，我们的主题修改就完成了，后期我们可以根据自己的需要去修改butterfly的配置文件，让我们的博客网站更加个性化。</p><p>下一篇文章我将说说如何修改主题让我们的博客网站更具个性化。</p><p>关于Hexo搭建博客到这里就讲得差不多了，下面我们就想怎么把博客部署到Github上。</p></div><hr><h1 id="部署博客到Github"><a href="#部署博客到Github" class="headerlink" title="部署博客到Github"></a>部署博客到Github</h1><p>首先，你得要有一个自己的Github账号吧，我相信99.99%的开发者都是有Github账号的，如果你是那0.01%，请前往Github自行注册。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><div class="note default simple"><p>在Github里创建一个存放博客项目的仓库，操作如下</p></div><p><img src="/img/warehouse-name.png" alt="存放博客项目的仓库"></p><div class="note info simple"><p>这里有两个注意点：</p><ol><li>仓库的名称必须与你Github账号名相同</li><li>仓库必须以<code>gitHub.io</code>结尾</li></ol><p>比如你Github账号名叫：<code>xiaoxunbao</code>，那你新建的这个仓库名就叫：<code>xiaoxunbaoi.github.io</code></p><p>创建之后，我们就有了一个存放博客项目仓库：</p></div><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_16.png" alt="存放博客项目仓库"></p><h3 id="安装Hexo部署插件"><a href="#安装Hexo部署插件" class="headerlink" title="安装Hexo部署插件"></a>安装Hexo部署插件</h3><div class="note default simple"><p>进入到Blogs目录下，安装部署插件：</p></div><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></tbody></table></figure><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_17.png" alt="安装部署插件图片"></p><p>###修改项目配置文件</p><div class="note success simple"><p>好了，万事俱备，只欠修改_config.yml文件了，打开_config.yml文件，拖拽到最后，修改文件：</p></div><p><img src="https://sunny-blog.oss-cn-beijing.aliyuncs.com/20220509/20220509_18.png" alt="原配置文件图片"></p><p>修改为：</p><p><img src="/img/github-config.png" alt="修改后配置文件图片"></p><div class="note info simple"><p>注意：repo为你刚创建的Github项目的地址，如果你是使用的vim打开的_config.yml，记得修改了要:wq保存退出</p></div><h3 id="重新生成项目-1"><a href="#重新生成项目-1" class="headerlink" title="重新生成项目"></a>重新生成项目</h3><p>清理项目缓存：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure><p>重新生成博客：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></tbody></table></figure><p>部署到云端（Github）：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></tbody></table></figure><div class="note info simple"><p>注意：这里每次使用hexo d部署到Github为了安全都要求输入账号密码，如果你不希望每次都输入账号密码，可以跟博主一样设置Github的SSH Keys，以后每次发布到Github就不需要输入账号密码了。</p></div><h3 id="为什么要备份—到Github"><a href="#为什么要备份—到Github" class="headerlink" title="为什么要备份—到Github"></a>为什么要备份—到Github</h3><p>在<code>这篇文章</code>中我们把<code>Hexo</code>和<code>Cithub</code>结合起来搭建了自己的个人博客，<code>hexo d</code>部署到<code>Cithub</code>的其实<code>Hexo</code>编译后的文件，这些文件是用来生成网页的，并不包含我们的源文<br>它其实上传到<code>Github</code>的是在我们本地目录里的<code>.deploy_git</code>里面的内容<br>我们的源文件比如相关<code>source</code>文件、配置文件等都是没有上传到<code>Github</code>上的，所以我们要利用<code>git</code>来做分支管理，对我们的源文件进行备份，这样我们就可以在另一台电脑上把源文件<code>clone</code>到本地安装相应的环境就可以继续写我们的博客了。</p><h3 id="克隆Hexo分支"><a href="#克隆Hexo分支" class="headerlink" title="克隆Hexo分支"></a>克隆Hexo分支</h3><p>在本地把我们刚建的分支<code>Hexo</code>克隆到本地<br>把克隆下来的项目里面的<code>.git</code>文件复制到我们的Hexo博客目录下</p><div class="note info simple"><p>注意：如果之前搭建博客的时候自己更换过主题文件的，请把主题文件里面的<code>.git</code>文件删除。</p></div><h3 id="开始备份"><a href="#开始备份" class="headerlink" title="开始备份"></a>开始备份</h3><p>进入到Blogs根目录下，执行如下命令：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "Blog源文件备份"</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></tbody></table></figure>这时候我们会看到<code>Cithub</code>上的<code>Hexo</code>分支就有我们的源文件了。如果你想要每次更改东西都希望备份到<code>Hexo</code>分支上，可以执行如下步骤：<figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">git add .</span><br><span class="line">git commit -m "备份"</span><br><span class="line">git push</span><br><span class="line">hexo g & hexo d</span><br></pre></td></tr></tbody></table></figure><h3 id="如何恢复博客"><a href="#如何恢复博客" class="headerlink" title="如何恢复博客"></a>如何恢复博客</h3><p>假如我们现在更换了电脑，希望在新的电脑上继续写博客，把<code>Cithub</code>上<code>hexo</code>分支上的项目克隆到本地（注意：是我们备份的那个分支）</p><p>进入到克隆下来的文件夹，执行如下命令：</p><figure class="highlight bash"><table><tbody style="display:block;overflow:auto;border:none"><tr><td class="code"><pre><span class="line">npm install hexo-cli</span><br><span class="line">npm install hexo-deployer-git</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></tbody></table></figure>然后再去安装主题相关的插件即可，当然如果你电脑上还没有<code>Node.js</code>等环境的话可能还需要去安装相关环境。好了，现在我们就基本上可以在另一台电脑上继续我们的博客之旅啦～]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo介绍&quot;&gt;&lt;a href=&quot;#hexo介绍&quot; class=&quot;headerlink&quot; title=&quot;hexo介绍&quot;&gt;&lt;/a&gt;hexo介绍&lt;/h1&gt;&lt;p&gt;Hexo是一个快速、简洁且高效的博客框架，具体可以见&lt;a href=&quot;https://hexo.io/zh-</summary>
      
    
    
    
    
  </entry>
  
</feed>
